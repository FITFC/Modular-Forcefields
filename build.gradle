plugins {
	id 'eclipse'
	id 'maven-publish'
	id 'net.minecraftforge.gradle' version "${forge_gradle_version}"
	id 'org.parchmentmc.librarian.forgegradle' version "${parchent_librarian_version}.+"
    id 'com.matthewprenger.cursegradle' version "${cursegradle_version}"
}


//apply plugin: 'net.minecraftforge.gradle'
//apply plugin: 'org.spongepowered.mixin'
//apply plugin: 'org.parchmentmc.librarian.forgegradle'

//apply plugin: 'eclipse'
//apply plugin: 'maven-publish'
//apply from: 'https://raw.githubusercontent.com/SizableShrimp/Forge-Class-Remapper/main/classremapper.gradle'

libsDirName = "../output"
distsDirName = "../output"

group = mffs_group
version = mffs_version

base {

	archivesName = mffs_name

}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)



println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            property 'forge.logging.console.level', 'debug'

            mods {
                modularforcefields {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                modularforcefields {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'modularforcefields', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                modularforcefields {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
	def Folder = new File("C:/AmpzLibz")
    if(Folder.exists()) {
        implementation fileTree(Folder)
    }
    def Folder2 = new File("libs")
    if(Folder2.exists()) {
        implementation fileTree(Folder2)
    }
    //makes testing easier; no JEI plugin for mod currently
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
    annotationProcessor "org.spongepowered:mixin:${mixin_annotationprocessor_version}:processor"
}


// Example for how to get properties into the manifest for reading by the runtime..
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
            "Specification-Title": "modularforcefields",
            "Specification-Vendor": "aurilisdev",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"aurilisdev",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
	finalizedBy 'reobfJar'
}

tasks.register('sourcesJar', Jar).configure {
	dependsOn classes
	from sourceSets.main.allSource
	archiveClassifier = 'sources'
}

tasks.register('deobfJar', Jar).configure {
	from sourceSets.main.output
	archiveClassifier = 'deobf'
}

tasks.named('publish').configure {
	dependsOn 'reobfJar'
}

/*
task sourcesJar(type: Jar, dependsOn: classes) {
	from sourceSets.main.allSource
	classifier = 'sources'
}
task deobfJar(type: Jar) {
	from sourceSets.main.output
	classifier = 'deobf'
}
*/

artifacts {
	archives sourcesJar
	archives deobfJar
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

/*
This needs to stay. It's the Maven repository for JEI along with a fallback!
*/
repositories{
		mavenCentral()
	  	maven {
	   	    name = "Progwml6 maven"
	   	    url = "https://dvs1.progwml6.com/files/maven/"
	  	}
	    maven {
	       name = "ModMaven"
	       url = "https://modmaven.k-4u.nl"
	    }
}

tasks.curseforge.dependsOn jar

curseforge {
  apiKey = System.getenv("CURSEFORGE_KEY")
  project {
    id = '322896'
    changelog = 'You can find changelog at: https://aurilis.dev/'
    releaseType = 'release'
    addGameVersion minecraft_version
    
    mainArtifact(jar) {
      relations {
        requiredDependency 'electrodynamics'
      }
      displayName=project.name+' ' + project.version
    }
  }
}
